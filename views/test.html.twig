<!doctype html>
<html>
<head>
	<title>Network | Dynamic Data</title>

	<script type="text/javascript" src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
	<script type="text/javascript" src="/js/vis.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.slim.js"></script>
	<link href="/css/vis.min.css" rel="stylesheet" type="text/css" />

	<style type="text/css">
	#mynetwork {
		height: 900px;
		border: 1px solid lightgray;
	}


	h4 {
		margin-bottom:3px;
	}
	#loadingBar {
		position:absolute;
		top:0px;
		left:0px;
		height: 902px;
		background-color:rgba(200,200,200,0.8);
		-webkit-transition: all 0.5s ease;
		-moz-transition: all 0.5s ease;
		-ms-transition: all 0.5s ease;
		-o-transition: all 0.5s ease;
		transition: all 0.5s ease;
		opacity:1;
	}
	#wrapper {
		position:relative;
		height:900px;
	}

	#text {
		position:absolute;
		top:8px;
		left:530px;
		width:30px;
		height:50px;
		margin:auto auto auto auto;
		font-size:22px;
		color: #000000;
	}


	div.outerBorder {
		position:relative;
		top:400px;
		height:44px;
		margin:auto auto auto auto;
		border:8px solid rgba(0,0,0,0.1);
		background: rgb(252,252,252);
		background: -moz-linear-gradient(top,  rgba(252,252,252,1) 0%, rgba(237,237,237,1) 100%);
		background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(252,252,252,1)), color-stop(100%,rgba(237,237,237,1)));
		background: -webkit-linear-gradient(top,  rgba(252,252,252,1) 0%,rgba(237,237,237,1) 100%);
		background: -o-linear-gradient(top,  rgba(252,252,252,1) 0%,rgba(237,237,237,1) 100%);
		background: -ms-linear-gradient(top,  rgba(252,252,252,1) 0%,rgba(237,237,237,1) 100%);
		background: linear-gradient(to bottom,  rgba(252,252,252,1) 0%,rgba(237,237,237,1) 100%);
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#fcfcfc', endColorstr='#ededed',GradientType=0 );
		border-radius:72px;
		box-shadow: 0px 0px 10px rgba(0,0,0,0.2);
	}

	#border {
		position:absolute;
		top:10px;
		left:10px;
		/*width:500px;*/
		height:23px;
		margin:auto auto auto auto;
		box-shadow: 0px 0px 4px rgba(0,0,0,0.2);
		border-radius:10px;
	}

	#bar {
		position:absolute;
		top:0px;
		left:0px;
		width:20px;
		height:20px;
		margin:auto auto auto auto;
		border-radius:11px;
		border:2px solid rgba(30,30,30,0.05);
		background: rgb(0, 173, 246); /* Old browsers */
		box-shadow: 2px 0px 4px rgba(0,0,0,0.4);
	}

	</style>
</head>
<body>
	<div id="mynetwork"></div>
	{% if user == "cerichar" %}<button class="btn btn-primary" id="save" >save positions</button>{% endif %}
	<script type="text/javascript">
	var network,nodes,edges;
	function objectToArray(obj) {
		return Object.keys(obj).map(function (key) {
			obj[key].id = key;
			return obj[key];
		});
	}

	function startNetwork() {
		var container = document.getElementById('mynetwork');
		var  options = {
			nodes: {
				shape: 'dot',
				size: 16
			},
			physics: {
				forceAtlas2Based: {
					gravitationalConstant: -30,
					centralGravity: 0.004,
				},
				solver: 'forceAtlas2Based',
				timestep: 0.2,
				stabilization: {
					enabled:false,
					iterations:500,
					updateInterval:25
				}
			}
		};
		$.get( '/nodes', function(nodelist) {
			$.get( '/edges', function(edgelist) {
				nodes = new vis.DataSet(nodelist);
				edges = new vis.DataSet(edgelist);
				var data = {
					nodes: nodes,
					edges: edges
				}
				network = new vis.Network(container, data, options);
				options.physics.enabled=true;
				network.setOptions(options);
			});
		});
	}
	$(function(){
		startNetwork();
		{% if user == "cerichar" %}
		$("#save").click(function(event) {
			event.preventDefault();
			var nodes = objectToArray(network.body.nodes);
			nodes.forEach(function(node, index){
				$.post( '/udpateNodePos',{"id": node.id, "x": node.x, "y":node.y}, function(res) {
					//console.log(node,res);
				});
			});
		});
		var socket = io();
		socket.on('node add', function(msg){
			console.log("NODE ADD ",msg);
			nodes.add(msg);
		});
		socket.on('edge add', function(msg){
			console.log("EDGE ADD ",msg);
			edges.add(msg);
		});
		{% endif %}
	});
	</script>
</body>
</html>
